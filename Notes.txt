function onSubmit(values: IPlatform) {
  toast({
        title: "You submitted the following values:",
        description: (
          <pre className="mt-2 w-full rounded-md bg-muted-block p-4">
            <code className="text-sky-600">
              {JSON.stringify(values, null, 2)}
            </code>
          </pre>
        ),
      });
   }

   date: z
    .string()
    .datetime({ message: "Invalid datetime string! Must be UTC." })
    .pipe(z.coerce.date()),


    <Input
                  pattern="^\d*(\.\d{0,2})?$"
                  {...register("value", {
                    valueAsNumber: true,
                  })}
                />
    
Mongo: tuEmhHkMGhFXFdhw
How to Create a Date and Time Picker Form | Next.js & Shadcn
https://www.youtube.com/watch?v=NJRvABjsE6E
https://shadcnui-expansions.typeart.cc/docs/datetime-picker
https://medium.com/@dinh.nt/create-your-own-datetime-picker-using-shadcn-409e6723225f
https://mitchellhein25.github.io/CSharp-and-React-Insights/2023/06/26/React-Query-useMutation-hook.html
https://tkdodo.eu/blog/mastering-mutations-in-react-query

Use <Button asChild> to have your button clickable where the onclick is in the children of the button

People.findOneAndUpdate(
{ name: "Yash Salvi" },
{ $push: { friends: friendNew } },
{ upsert: true }
);

People.findOneAndUpdate(
{ name: "Yash Salvi" },
{ $push: { friends: friendNew } },
).exec();

function deleteCOI(companyId: string, buildingId: string) {
const company = await Companies.findOneAndUpdate(
{ companyId },
{ $pull: { cois: { buildingId: buildingId } } }
);
return company;
}

  // const placeholder = {
//   _id: new mongoose.Types.ObjectId(),
//   uid: "",
//   markets: [],
// };


const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
  },
  email: {
    type: String,
    required: true,
  }
}, { timestamps: true });

rules:
  "no-explicit-any": ["off"]
  NOT "@typescript-eslint/no-explicit-any": ["off"]


  // import { Separator } from "@/components/ui/separator";

  https://stackoverflow.com/questions/19287142/populate-a-mongoose-model-with-a-field-that-isnt-an-id

  https://rasitcolakel.medium.com/exploring-zod-a-comprehensive-guide-to-powerful-data-validation-in-javascript-typescript-2c4818b5646d


  Microsoft Copilot
  ```
  const englishArray = [
  { id: 101, name: "Elephant" },
  { id: 102, name: "Octopus" }
];

const chineseArray = [
  { id: 101, name: "DGHktyi" }
];

const newArray = englishArray.map(englishItem => {
  const chineseItem = chineseArray.find(item => item.id === englishItem.id);
  return {
    ...englishItem,
    name: chineseItem ? chineseItem.name : englishItem.name
  };
});

console.log(newArray);
```

const objects = [
  { id: 101, name: "Object 1" },
  { id: 106, name: "Object 2" },
  { id: 207, name: "Object 3" },
  { id: 211, name: "Object 4" },
  { id: 305, name: "Object 5" },
  { id: 507, name: "Object 6" },
  { id: 1110, name: "Object 7" }
];

const groupedObjects = objects.reduce((acc, obj) => {
  const groupKey = Math.floor(obj.id / 100) * 100;
  if (!acc[groupKey]) {
    acc[groupKey] = [];
  }
  acc[groupKey].push(obj);
  return acc;
}, {});

console.log(groupedObjects);



    columnHelper.accessor("roles", {
      cell: (info) => {
        const roles = info.getValue();

        return (
          <div>
            {roles.map((role) => (
              <div className="px-2 py-1 bg-green-500 rounded-full text-white text-center my-2 text-sm">
                {role.toUpperCase()}
              </div>
            ))}
          </div>
        );
      },
      id: "roles",
      header: "Roles",
    }),

    console.time('everything');
elements.forEach(() => {
  console.time('methodCall');
  methodCall(() => {
    console.time('build');
	build();
	console.timeEnd('build');
  });
  console.timeEnd('methodCall');
});
console.timeEnd('everything');



    
https://onur1337.medium.com/using-zod-to-validate-date-range-picker-76145ea28e8a




<FormField
          control={form.control}
          name="date"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>Fixture date</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "w-full pl-3 text-left font-normal",
                        !field.value && "text-muted-foreground"
                      )}
                    >
                      {field.value ? (
                        format(field.value, "PPP")
                      ) : (
                        <span>Pick a date</span>
                      )}
                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-full p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={field.value}
                    onSelect={(e) => field.onChange(e?.toISOString())}
                    disabled={(date) =>
                      date > new Date() || date < new Date("2024-01-01")
                    }
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
              <FormDescription>
                Your date of birth is used to calculate your age.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />